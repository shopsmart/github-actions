---

name: 'Deploy lambda function'
description: 'Deploys a lambda function'

inputs:
  pattern:
    description: |
      If downloading release assets from github, the pattern for the zip file.
      Otherwise, the path to the zip.
    type: string
    required: true

  # GH release Options
  github-token:
    description: 'The github token to allow for searching for release assets'
    type: string
    default: ${{ github.token }}
  tag:
    description: 'The github release tag to pull that assets from'
    type: string
    default: ''

  # AWS (S3) Options
  aws-access-key-id:
    description: 'The AWS access key id to log into ECR with'
    default: ''
  aws-secret-access-key:
    description: 'The AWS secret access key to log into ECR with'
    default: ''
  aws-region:
    description: 'The AWS region to log into if using ECR'
    default: 'us-east-1'
  role-to-assume:
    description: 'Allows one to configure the assume role'
    default: ''
  role-duration-seconds:
    description: 'Allows one to configure the duration of assume role'
    default: 1200

  function-name:
    description: The name of the function name
    type: string
    required: true
  function-tags:
    description: |
      Key value pairs to attach to the lambda function

      Example:
        function-tags: |
          version=v1
          owner=carl
    default: ''

runs:
  using: 'composite'
  steps:
    - name: 'Download release assets'
      shell: bash
      run: gh -R "${{ github.repository }}" release download -p "${{ inputs.pattern }}" "${{ inputs.tag }}"
      env:
        GH_TOKEN: ${{ inputs.github-token }}
      # Only if we are downloading assets from gh release
      if: inputs.tag != ''

    - name: 'Configure AWS credentials'
      uses: aws-actions/configure-aws-credentials@v1-node16
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ inputs.aws-region }}
        role-to-assume: ${{ inputs.role-to-assume }}
        role-duration-seconds: ${{ inputs.role-duration-seconds }}

    - name: 'Deploy lambda code'
      shell: bash
      run: ${{ github.action_path }}/deploy-lambda.sh "${{ inputs.function-name }}" "${{ inputs.pattern }}"

    - name: 'Tag the lambda'
      shell: bash
      run: ${{ github.action_path }}/tag-lambda.sh "${{ inputs.function-name }}"
      env:
        LAMBDA_TAGS: ${{ inputs.function-tags }}
      if: inputs.function-tags != ''
