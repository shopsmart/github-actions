---

name: 'Deploy lambda function'
description: 'Deploys a lambda function'

inputs:
  zip-file:
    description: The path to the zip file to upload as the new lambda function code.
    required: true

  # Lambda options
  function-name:
    description: The name of the function name
    required: true
  function-tags:
    description: |
      Key value pairs to attach to the lambda function

      Example:
        function-tags: |
          version=v1
          owner=carl
    default: ''
  publish-version:
    description: If true, a lambda version will be published
    default: 'true'
  version-description:
    description: 'The description of the version being published (if publish-version is true)'
    default: ${{ github.sha }}
  update-alias:
    description: 'If true, the alias will be updated to the new version'
    default: 'false'
  alias-name:
    description: 'The name of the alias to update. Required if update-alias is true'
    default: ''

  # s3 options
  upload-to-s3:
    description: If true and an s3-bucket is provided, the action will upload the asset to s3 before updating the lambda
    default: 'true'
  s3-bucket:
    description: The s3 bucket to upload the artifact to
    default: ''
  s3-key:
    description: The path within the s3 bucket to upload the artifact to
    default: ''

outputs:
  version:
    description: The version of the lambda that was published (if publish-version is true)
    value: ${{ steps.publish-version.outputs.version }}

runs:
  using: 'composite'
  steps:
    - name: 'Upload lambda code to s3'
      id: upload-code
      shell: bash
      run: ${{ github.action_path }}/upload-lambda.sh "${{ inputs.zip-file }}" "${{ inputs.s3-bucket }}" "${{ inputs.s3-key }}"
      if: inputs.s3-bucket != '' && inputs.upload-to-s3 == 'true'

    - name: 'Deploy lambda code'
      shell: bash
      run: ${{ github.action_path }}/deploy-lambda.sh "${{ inputs.function-name }}" "${{ inputs.zip-file }}"
      env:
        S3_BUCKET: ${{ inputs.s3-bucket }}
        S3_KEY: ${{ inputs.s3-key || steps.upload-code.outputs.s3-key }}

    - name: 'Tag the lambda'
      shell: bash
      run: ${{ github.action_path }}/tag-lambda.sh "${{ inputs.function-name }}"
      env:
        LAMBDA_TAGS: ${{ inputs.function-tags }}
      if: inputs.function-tags != ''

    # An error occurred (ResourceConflictException) when calling the PublishVersion operation: The operation cannot be performed at this time.
    #   An update is in progress for resource: arn:aws:lambda:<region>:***:function:<redacted>
    - name: 'Let the function settle'
      shell: bash
      run: sleep 10 # seconds

    - name: 'Cut a version of the lambda'
      id: publish-version
      if: inputs.publish-version == 'true'
      shell: bash
      run: ${{ github.action_path }}/version-lambda.sh "${{ inputs.function-name }}" "${{ inputs.version-tag || github.sha }}"

    - name: 'Update the alias'
      if: inputs.update-alias == 'true'
      shell: bash
      run: ${{ github.action_path }}/update-alias.sh "${{ inputs.function-name }}" "${{ inputs.alias-name }}" "${{ steps.publish-version.outputs.version }}"
