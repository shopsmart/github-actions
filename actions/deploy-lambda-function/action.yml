---

name: 'Deploy lambda function'
description: 'Deploys a lambda function'

inputs:
  zip-file:
    description: The path to the zip file to upload as the new lambda function code.
    type: string
    required: true

  # GH release Options
  github-token:
    description: 'The github token to allow for searching for release assets'
    type: string
    default: ${{ github.token }}
  tag:
    description: 'The github release tag to pull that assets from'
    type: string
    default: ''
  artifact-name:
    description: The name of the artifact to download if not downloading from a release
    type: string
    default: ''

  # Lambda options
  function-name:
    description: The name of the function name
    type: string
    required: true
  function-tags:
    description: |
      Key value pairs to attach to the lambda function

      Example:
        function-tags: |
          version=v1
          owner=carl
    default: ''
  create-function-version:
    description: If true, a lambda version will be created
    type: boolean
    default: true

  # s3 options
  s3-bucket:
    description: The s3 bucket to upload the artifact to
    type: string
    default: ''
  s3-key:
    description: The path within the s3 bucket to upload the artifact to
    type: string
    default: ''
  s3-tags:
    description: |
      Key value pairs to attach to the s3 object

      Example:
        s3-tags: |
          version=v1
          owner=carl

runs:
  using: 'composite'
  steps:
    - name: 'Upload lambda code'
      uses: shopsmart/github-actions/actions/deploy-to-s3-bucket@feature/custom-lambda-deploy
      with:
        unpack: false
        s3-bucket: ${{ inputs.s3-bucket }}
        s3-bucket-path: ${{ inputs.s3-key }}
        s3-tags: ${{ inputs.s3-tags }}

    - name: 'Deploy lambda code'
      shell: bash
      run: ${{ github.action_path }}/deploy-lambda.sh "${{ inputs.function-name }}" "${{ inputs.zip-file }}"

    - name: 'Tag the lambda'
      shell: bash
      run: ${{ github.action_path }}/tag-lambda.sh "${{ inputs.function-name }}"
      env:
        LAMBDA_TAGS: ${{ inputs.function-tags }}
      if: inputs.function-tags != ''

    # - name: 'Cut a version of the lambda'
    #   if: inputs.create-function-version == true
    #   shell: bash
    #   run: ${{ github.action_path }}/version-lambda.sh "${{ inputs.function-name }}" "${{ inputs.tag }}"
