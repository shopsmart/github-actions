---

name: 'Build docker image for ECR'

on:
  workflow_call:
    inputs:
      ref:
        description: 'The branch/sha/tag to build from'
        type: string
        default: ''

      repository-name:
        description: 'The name of the ecr repository to push the docker image to'
        type: string
        required: true

      aws-region:
        description: 'The aws region where resources live'
        type: string
        default: us-east-1

      role-name:
        description: 'The name of the IAM role allowed to upload the ECR repository'
        type: string
        default: ${{ inputs.repository-name }}-deploy

      # begin docker/setup-buildx-action inputs
      buildx-version:
        description: 'Buildx version. (eg. v0.3.0)'
        required: false
      driver:
        description: 'Sets the builder driver to be used'
        default: 'docker-container'
        required: false
      driver-opts:
        description: 'List of additional driver-specific options. (eg. image=moby/buildkit:master)'
        required: false
      buildkitd-flags:
        description: 'Flags for buildkitd daemon'
        default: '--allow-insecure-entitlement security.insecure --allow-insecure-entitlement network.host'
        required: false
      install:
        description: 'Sets up docker build command as an alias to docker buildx build'
        default: 'false'
        required: false
      use:
        description: 'Switch to this builder instance'
        default: 'true'
        required: false
      endpoint:
        description: 'Optional address for docker socket or context from `docker context ls`'
        required: false
      platforms:
        description: 'Fixed platforms for current node. If not empty, values take priority over the detected ones'
        required: false
      config:
        description: 'BuildKit config file'
        required: false
      config-inline:
        description: 'Inline BuildKit config'
        required: false
      append:
        description: 'Append additional nodes to the builder'
        required: false
      # end docker/setup-buildx-action inputs

      # begin docker/build-push-action inputs
      add-hosts:
        description: "List of a customs host-to-IP mapping (e.g., docker:10.180.0.1)"
        required: false
      allow:
        description: "List of extra privileged entitlement (e.g., network.host,security.insecure)"
        required: false
      attests:
        description: "List of attestation parameters (e.g., type=sbom,generator=image)"
        required: false
      build-args:
        description: "List of build-time variables"
        required: false
      build-contexts:
        description: "List of additional build contexts (e.g., name=path)"
        required: false
      builder:
        description: "Builder instance"
        required: false
      cache-from:
        description: "List of external cache sources for buildx (e.g., user/app:cache, type=local,src=path/to/dir)"
        required: false
      cache-to:
        description: "List of cache export destinations for buildx (e.g., user/app:cache, type=local,dest=path/to/dir)"
        required: false
      cgroup-parent:
        description: "Optional parent cgroup for the container used in the build"
        required: false
      context:
        description: "Build's context is the set of files located in the specified PATH or URL"
        required: false
      file:
        description: "Path to the Dockerfile"
        required: false
        default: docker/Dockerfile # BD default
      labels:
        description: "List of metadata for an image"
        required: false
      load:
        description: "Load is a shorthand for --output=type=docker"
        required: false
        default: 'false'
      network:
        description: "Set the networking mode for the RUN instructions during build"
        required: false
      no-cache:
        description: "Do not use cache when building the image"
        required: false
        default: 'false'
      no-cache-filters:
        description: "Do not cache specified stages"
        required: false
      outputs:
        description: "List of output destinations (format: type=local,dest=path)"
        required: false
      # duplicate from buildx action
      # platforms:
      #   description: "List of target platforms for build"
      #   required: false
      provenance:
        description: "Generate provenance attestation for the build (shorthand for --attest=type=provenance)"
        required: false
      pull:
        description: "Always attempt to pull all referenced images"
        required: false
        default: 'false'
      push:
        description: "Push is a shorthand for --output=type=registry"
        required: false
        default: 'false'
      sbom:
        description: "Generate SBOM attestation for the build (shorthand for --attest=type=sbom)"
        required: false
      secrets:
        description: "List of secrets to expose to the build (e.g., key=string, GIT_AUTH_TOKEN=mytoken)"
        required: false
      secret-files:
        description: "List of secret files to expose to the build (e.g., key=filename, MY_SECRET=./secret.txt)"
        required: false
      shm-size:
        description: "Size of /dev/shm (e.g., 2g)"
        required: false
      ssh:
        description: "List of SSH agent socket or keys to expose to the build"
        required: false
      tags:
        description: "List of tags"
        required: false
      target:
        description: "Sets the target stage to build"
        required: false
      ulimit:
        description: "Ulimit options (e.g., nofile=1024:1024)"
        required: false
      github-token:
        description: "GitHub Token used to authenticate against a repository for Git context"
        default: ${{ github.token }}
        required: false
      # end docker/build-push-action inputs

    secrets:
      aws-account-id:
        description: 'The AWS account id that the ecr repository lives under'
        required: true

      ssh-private-key:
        description: 'If using private repositories for dependencies, the ssh key to add to the agent and pass along to the docker build'
        default: ''

permissions:
  contents: read  # default
  id-token: write # aws auth

env:
  DOCKER_IMAGE: ${{ secrets.aws-account-id }}.dkr.ecr.${{ inputs.aws-region }}.amazonaws.com/${{ inputs.repository-name }}
  DEPLOY_IAM_ROLE: arn:aws:iam::${{ secrets.aws-account-id }}:role/${{ inputs.role-name }}

jobs:
  build-docker-image:
    name: 'Build docker image'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref }}

      - name: 'Resolve sha from ref'
        id: sha
        run: |
          sha="$(git rev-parse HEAD)"
          echo "sha=$sha" >> $GITHUB_OUTPUT

      - name: 'Is github release?'
        id: is-gh-release
        uses: shopsmart/github-actions/actions/is-gh-release@v2
        with:
          ref: ${{ inputs.ref }}

      - name: 'If release, add additional tag'
        id: additional-tag
        run: |
          additional_tag=''
          if [[ "${{ steps.is-gh-release.outputs.is-release }}" == 'true' ]]; then
            additional_tag="${{ env.DOCKER_IMAGE }}:${{ inputs.ref }}"
          fi
          echo "tag=$additional_tag" >> $GITHUB_OUTPUT

      # for private dependencies
      - name: 'Install SSH Key'
        if: secrets.ssh-private-key != ''
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.ssh-private-key }}

      - name: 'If ssh private key provided, pass the default ssh agent'
        id: ssh
        run:
          ssh=''
          if [ -n "${{ secrets.ssh-private-key }}" ]; then
            ssh=default
          fi
          echo "ssh=$ssh" >> $GITHUB_OUTPUT

      - name: 'Configure AWS credentials'
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-region: ${{ inputs.aws-region }}
          role-to-assume: ${{ env.DEPLOY_IAM_ROLE }}
          role-duration-seconds: 1200

      - name: 'Login to Amazon ECR'
        uses: aws-actions/amazon-ecr-login@v1

      - name: 'Setup docker buildx'
        uses: docker/setup-buildx-action@v2
        with:
          version: ${{ inputs.buildx-version }}
          driver: ${{ inputs.driver }}
          driver-opts: ${{ inputs.driver-opts }}
          buildkitd-flags: ${{ inputs.buildkitd-flags }}
          install: ${{ inputs.install }}
          use: ${{ inputs.use }}
          endpoint: ${{ inputs.endpoint }}
          platforms: ${{ inputs.platforms }}
          config: ${{ inputs.config }}
          config-inline: ${{ inputs.config-inline }}
          append: ${{ inputs.append }}

      - name: 'Build docker image'
        uses: docker/build-push-action@v4
        with:
          add-hosts: ${{ inputs.add-hosts }}
          allow: ${{ inputs.allow }}
          attests: ${{ inputs.attests }}
          build-args: ${{ inputs.build-args }}
          build-contexts: ${{ inputs.build-contexts }}
          builder: ${{ inputs.builder }}
          cache-from: ${{ inputs.cache-from }}
          cache-to: ${{ inputs.cache-to }}
          cgroup-parent: ${{ inputs.cgroup-parent }}
          context: ${{ inputs.context }}
          file: ${{ inputs.file }}
          labels: |
            github.sha=${{ steps.sha.outputs.sha }}
            github.ref=${{ inputs.ref }}
            ${{ inputs.labels }}
          load: ${{ inputs.load }}
          network: ${{ inputs.network }}
          no-cache: ${{ inputs.no-cache }}
          no-cache-filters: ${{ inputs.no-cache-filters }}
          outputs: ${{ inputs.outputs }}
          platforms: ${{ inputs.platforms }}
          provenance: ${{ inputs.provenance }}
          pull: ${{ inputs.pull }}
          push: ${{ inputs.push }}
          sbom: ${{ inputs.sbom }}
          secrets: ${{ inputs.secrets }}
          secret-files: ${{ inputs.secret-files }}
          shm-size: ${{ inputs.shm-size }}
          ssh: |
            ${{ steps.ssh.outputs.ssh }}
            ${{ inputs.ssh }}
          tags: |
            ${{ env.DOCKER_IMAGE }}:${{ steps.sha.outputs.sha }}
            ${{ steps.additional-tag.outputs.tag }}
            ${{ inputs.tags }}
          target: ${{ inputs.target }}
          ulimit: ${{ inputs.ulimit }}
          github-token: ${{ inputs.github-token }}

      - name: 'Pull and package docker image'
        if: steps.is-gh-release.outputs.is-release == 'true'
        env:
          NAME: ${{ inputs.repository-name }}
          IMAGE: ${{ env.DOCKER_IMAGE }}:${{ steps.sha.outputs.sha }}
          TAG: ${{ inputs.ref }}
        run: |
          set -eo pipefail
          echo "[INFO ] Exporting $IMAGE and zipping to docker-image-$NAME-$TAG.tgz" >&2
          docker pull "$IMAGE"
          docker save "$IMAGE" | gzip > "docker-image-$NAME-$TAG.tgz"

      - name: 'Upload docker image'
        if: steps.is-gh-release.outputs.is-release == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag: ${{ inputs.ref }}
          files: docker-image-*.tgz
