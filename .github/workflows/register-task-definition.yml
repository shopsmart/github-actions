---

name: 'Register task definition'

on:
  workflow_call:
    inputs:
      environment:
        description: 'If provided, the environment to deploy to.  This will use github environments for the job.'
        type: string
        required: false

      aws-region:
        description: 'The aws region where resources live'
        type: string
        default: us-east-1

      role-name:
        description: 'The name of the IAM role allowed to upload the task definition'
        type: string
        required: true

      # begin aws-actions/amazon-ecs-deploy-task-definition
      task-definition:
        description: 'The path to the ECS task definition file to register'
        type: string
        required: false
        default: task-definition.yml
      service:
        description: 'The name of the ECS service to deploy to. The action will only register the task definition if no service is given.'
        type: string
        required: false
      cluster:
        description: "The name of the ECS service's cluster.  Will default to the 'default' cluster"
        type: string
        required: false
      wait-for-service-stability:
        description: 'Whether to wait for the ECS service to reach stable state after deploying the new task definition. Valid value is "true". Will default to not waiting.'
        type: boolean
        required: false
      wait-for-minutes:
        description: 'How long to wait for the ECS service to reach stable state, in minutes (default: 30 minutes, max: 6 hours). For CodeDeploy deployments, any wait time configured in the CodeDeploy deployment group will be added to this value.'
        type: number
        required: false
      codedeploy-appspec:
        description: "The path to the AWS CodeDeploy AppSpec file, if the ECS service uses the CODE_DEPLOY deployment controller. Will default to 'appspec.yaml'."
        type: string
        required: false
      codedeploy-application:
        description: "The name of the AWS CodeDeploy application, if the ECS service uses the CODE_DEPLOY deployment controller. Will default to 'AppECS-{cluster}-{service}'."
        type: string
        required: false
      codedeploy-deployment-group:
        description: "The name of the AWS CodeDeploy deployment group, if the ECS service uses the CODE_DEPLOY deployment controller. Will default to 'DgpECS-{cluster}-{service}'."
        type: string
        required: false
      codedeploy-deployment-description:
        description: "A description of the deployment, if the ECS service uses the CODE_DEPLOY deployment controller."
        type: string
        required: false
      force-new-deployment:
        description: 'Whether to force a new deployment of the service. Valid value is "true". Will default to not force a new deployment.'
        type: boolean
        required: false
      # end aws-actions/amazon-ecs-deploy-task-definition

      task-definition-tags:
        description: 'Tags to add to the task definition. Format is key=value separated by new lines'
        type: string
        required: false
      service-tags:
        description: 'Tags to add to the ECS service. Format is key=value separated by new lines'
        type: string
        required: false

      artifact-name:
        description: 'The name of the artifact to download'
        type: string
        default: task-definition

      # notify-slack
      notify-slack:
        description: 'Indicates if a slack notification should go out before and after the deploy'
        type: boolean
        default: false

      application:
        description: 'The name of the application; required if notify-slack is true'
        type: string
        required: false

      slack-template:
        description: 'The j2 template to pass to the notify-slack action'
        type: string
        required: false

      version:
        description: 'The version of the application being deployed; required if notify-slack is true'
        type: string
        required: false

      link:
        description: 'The link to the application'
        type: string
        required: false

      # notify-datadog
      notify-datadog:
        description: 'Indicates if a datadog downtime should be posted'
        type: boolean
        default: false
      allow-datadog-to-fail:
        description: 'If true, will not fail the pipeline if the datadog downtime action fails'
        type: boolean
        default: true

      datadog-scope:
        description: 'The scope to which the downtime applies. Must follow the [common search syntax](https://docs.datadoghq.com/logs/explorer/search_syntax/)'
        type: string
        required: false
      datadog-message:
        description: 'A message to include with notifications for this downtime. Email notifications can be sent to specific users by using the same @username notation as events.'
        type: string
        required: false
      datadog-monitor-tags:
        description: 'A comma delimited list of monitor tags. For example, tags that are applied directly to monitors, not tags that are used in monitor queries (which are filtered by the scope parameter), to which the downtime applies. The resulting downtime applies to monitors that match all provided monitor tags. Setting monitor_tags to [*] configures the downtime to mute all monitors for the given scope.'
        type: string
        required: false
      datadog-monitor-id:
        description: 'ID of the monitor to prevent notifications.'
        type: string
        required: false
      datadog-end:
        description: 'ISO-8601 Datetime to end the downtime.  Additionally, one can specify time from now as `XhXmXs`.'
        type: string
        required: false
      datadog-start:
        description: 'ISO-8601 Datetime to start the downtime.  Additionally, one can specify time from now as `XhXmXs`.'
        type: string
        required: false

    secrets:
      aws-account-id:
        description: 'The AWS account id that the ecr repository lives under'
        required: true

      # notify-slack
      slack-webhook-url:
        description: 'The webhook URL to send the slack notification to; requires notify-slack to be true'
        required: false

      # notify-datadog
      datadog-api-key:
        description: 'The secret API key to authenticate the request with'
        required: false
      datadog-app-key:
        description: 'The app key to authenticate the request with (pairs with the api key)'
        required: false

    outputs:
      revision-number:
        description: 'The revision number of the task definition just published'
        value: ${{ jobs.register-task-definition.outputs.revision-number }}

permissions:
  contents: read  # default
  id-token: write # aws auth

env:
  DEPLOY_IAM_ROLE: arn:aws:iam::${{ secrets.aws-account-id }}:role/${{ inputs.role-name }}
  ECS_SERVICE_ARN: arn:aws:ecs:${{ inputs.aws-region }}:${{ secrets.aws-account-id }}:service/${{ inputs.cluster && format('{0}/', inputs.cluster) }}${{ inputs.service }}

defaults:
  run:
    shell: bash

jobs:
  register-task-definition:
    name: 'Register task definition'
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    outputs:
      revision-number: ${{ steps.revision.outputs.revision-number }}
    steps:
      - name: 'Notify slack of deployment started'
        if: inputs.notify-slack == true
        uses: shopsmart/github-actions/actions/notify-slack@v3
        with:
          application: ${{ inputs.application }}
          environment: ${{ inputs.environment }}
          link: ${{ inputs.link }}
          status: started
          type: deployment
          template: ${{ inputs.slack-template }}
          version: ${{ inputs.version }}
          slack-webhook-url: ${{ secrets.slack-webhook-url }}

      - name: 'Notify datadog of deployment'
        if: inputs.notify-datadog == true
        uses: shopsmart/github-actions/actions/create-datadog-downtime@v3
        with:
          datadog-api-key: ${{ secrets.datadog-api-key }}
          datadog-app-key: ${{ secrets.datadog-app-key }}
          scope: ${{ inputs.datadog-scope }}
          message: ${{ inputs.datadog-message }}
          monitor-id: ${{ inputs.datadog-monitor-id }}
          monitor-tags: ${{ inputs.datadog-monitor-tags }}
          start: ${{ inputs.datadog-start }}
          end: ${{ inputs.datadog-end }}
        continue-on-error: ${{ inputs.allow-datadog-to-fail }}

      - name: 'Download task-definition'
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifact-name }}

      - name: 'Configure AWS Credentials'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ inputs.aws-region }}
          role-to-assume: ${{ env.DEPLOY_IAM_ROLE }}

      - name: 'Register task definition'
        id: register
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ inputs.task-definition }}
          service: ${{ inputs.service }}
          cluster: ${{ inputs.cluster }}
          wait-for-service-stability: ${{ inputs.wait-for-service-stability }}
          wait-for-minutes: ${{ inputs.wait-for-minutes }}
          codedeploy-appspec: ${{ inputs.codedeploy-appspec }}
          codedeploy-application: ${{ inputs.codedeploy-application }}
          codedeploy-deployment-group: ${{ inputs.codedeploy-deployment-group }}
          codedeploy-deployment-description: ${{ inputs.codedeploy-deployment-description }}
          force-new-deployment: ${{ inputs.force-new-deployment }}

      - name: 'Tag the task definition'
        uses: shopsmart/github-actions/actions/tag-ecs-resource@v3
        with:
          resource-arn: ${{ steps.register.outputs.task-definition-arn }}
          tags: ${{ inputs.task-definition-tags }}

      - name: 'Tag the ECS Service'
        if: inputs.service != ''
        uses: shopsmart/github-actions/actions/tag-ecs-resource@v3
        with:
          resource-arn: ${{ env.ECS_SERVICE_ARN }}
          tags: ${{ inputs.service-tags }}

      - name: 'Get revision number'
        id: revision
        run: echo "revision-number=${TASK_DEFINITION_ARN##*:}" >> $GITHUB_OUTPUT
        env:
          TASK_DEFINITION_ARN: ${{ steps.register.outputs.task-definition-arn }}

      - name: 'Notify slack of deployment status'
        if: always() && inputs.notify-slack == true
        uses: shopsmart/github-actions/actions/notify-slack@v3
        with:
          application: ${{ inputs.application }}
          environment: ${{ inputs.environment }}
          link: ${{ inputs.link }}
          status: ${{ job.status }}
          type: deployment
          template: ${{ inputs.slack-template }}
          version: ${{ inputs.version }}
          slack-webhook-url: ${{ secrets.slack-webhook-url }}
